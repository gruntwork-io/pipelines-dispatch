name: "Pipelines Dispatch"
description: "Dispatch Terragrunt plan/apply/destroy jobs with Gruntwork Pipelines"
inputs:
  account_id:
    description: "The AWS Account in which the action will run"
    required: true
  repo:
    description: "The infrastructure-pipelines repo where jobs should be dispatched"
    required: true
  repo_owner:
    description: "The owner of the infrastructure-pipelines repo where jobs should be dispatched"
    required: true
  branch:
    description: "The branch against which Pipelines will run the action"
    required: true
  working_directory:
    description: "The directory in which Terragrunt will run the action"
    required: true
  command:
    description: "The command (e.g., plan, apply, etc) for Terragrunt to run"
    required: true
  args:
    description: "The arguments to pass into Terragrunt"
    required: true
  infra_pipelines_token:
    description: "GitHub PAT which has access to run GitHub Actions Workflows in your infrastructure-pipelines repository"
    required: true
  infra_live_token:
    description: "GitHub PAT which has access to create issues and PR comments in your infrastructure-live repository"
    required: true
  change_type:
    description: "What type of infrastructure change occurred"
    required: true
  additional_data:
    description: "Change Type specific data"
    required: false
  actor:
    description: "The github actor responsible for the change"
    required: true

runs:
  using: "composite"
  steps:
    - name: Dispatch an action and get the run ID
      if: ${{ !contains(fromJSON('["AccountRequested", "AccountAdded"]'), inputs.change_type)}}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: codex-/return-dispatch@v1.10.0
      id: return_dispatch
      with:
        token: ${{ inputs.infra_pipelines_token }}
        ref: "refs/heads/main"
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        workflow: terragrunt-executor.yml
        workflow_inputs: '{
          "account": "${{ inputs.account_id }}",
          "branch": "${{ inputs.branch }}",
          "working_directory": "${{ inputs.working_directory }}",
          "terragrunt_command": "${{ inputs.command }} ${{ inputs.args }}"
          }'
    - name: Dispatch an action and get the run ID
      if: ${{ inputs.change_type == 'AccountRequested' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: codex-/return-dispatch@v1.10.0
      id: return_dispatch_acct_req
      with:
        token: ${{ inputs.infra_pipelines_token }}
        ref: "refs/heads/main"
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        workflow: create-account-and-generate-baselines.yml
        workflow_inputs: '{
          "management_account": "${{ inputs.account_id }}",
          "new_account_name": "${{ fromJSON(inputs.additional_data).AccountName }}",
          "branch": "${{ inputs.branch }}",
          "working_directory": "${{ inputs.working_directory }}",
          "terragrunt_command": "${{ inputs.command }} ${{ inputs.args }}"
          }'
    - name: Dispatch an action and get the run ID
      if: ${{ inputs.change_type == 'AccountAdded' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: codex-/return-dispatch@v1.10.0
      id: return_dispatch_acct_add
      with:
        token: ${{ inputs.infra_pipelines_token }}
        ref: "refs/heads/main"
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        workflow: apply-new-account-baseline.yml
        workflow_inputs: '{
          "management_account": "${{ inputs.account_id }}",
          "child_account": "${{ fromJSON(inputs.additional_data).ChildAccountId }}",
          "branch": "${{ inputs.branch }}",
          "working_directory": "${{ inputs.working_directory }}",
          "terragrunt_command": "${{ inputs.command }} ${{ inputs.args }}"
          }'

    # Await default
    - name: Await Run ID ${{ steps.return_dispatch.outputs.run_id }}
      if: ${{ !contains(fromJSON('["AccountRequested", "AccountAdded"]'), inputs.change_type)}}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: Codex-/await-remote-run@v1.9.0
      with:
        token: ${{ inputs.infra_pipelines_token }}
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        run_id: ${{ steps.return_dispatch.outputs.run_id }}
        run_timeout_seconds: 3600 # one hour
        poll_interval_ms: 5000 # Optional

    - name: Completed
      if: ${{ always() && !contains(fromJSON('["AccountRequested", "AccountAdded"]'), inputs.change_type)}}
      shell: bash
      env:
        COMMAND: ${{ inputs.command }}
        WORKING_DIR: ${{ inputs.working_directory }}
        ACCOUNT_ID: ${{ inputs.account_id }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
      run: echo "::notice ::Completed $COMMAND for $WORKING_DIR in acct $ACC0UNT_ID%0AFor details see https://github.com/$REPO_OWNER/$REPO/actions/runs/${{ steps.return_dispatch.outputs.run_id }}"

    # Await account request
    - name: Await Acct Req Run ID ${{ steps.return_dispatch_acct_req.outputs.run_id }}
      if: ${{ always() && inputs.change_type == 'AccountRequested' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: Codex-/await-remote-run@v1.9.0
      with:
        token: ${{ inputs.infra_pipelines_token }}
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        run_id: ${{ steps.return_dispatch_acct_req.outputs.run_id }}
        run_timeout_seconds: 3600 # one hour
        poll_interval_ms: 5000 # Optional

    - name: Completed Acct Req
      if: ${{ always() && inputs.change_type == 'AccountRequested' }}
      shell: bash
      env:
        COMMAND: ${{ inputs.command }}
        WORKING_DIR: ${{ inputs.working_directory }}
        ACCOUNT_ID: ${{ inputs.account_id }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
      run: echo "::notice ::Completed $COMMAND for $WORKING_DIR in acct $ACCOUNT_ID%0AFor details see https://github.com/$REPO_OWNER/$REPO/actions/runs/${{ steps.return_dispatch_acct_req.outputs.run_id }}"

    # Await account added
    - name: Await Acct Add Run ID ${{ steps.return_dispatch_acct_add.outputs.run_id }}
      if: ${{ always() && inputs.change_type == 'AccountAdded' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: Codex-/await-remote-run@v1.9.0
      with:
        token: ${{ inputs.infra_pipelines_token }}
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        run_id: ${{ steps.return_dispatch_acct_add.outputs.run_id }}
        run_timeout_seconds: 3600 # one hour
        poll_interval_ms: 5000 # Optional

    - name: Completed Acct Add
      if: ${{ always() && inputs.change_type == 'AccountAdded' }}
      shell: bash
      run: echo "::notice ::Completed ${{ inputs.command }} for ${{ inputs.working_directory }} in acct ${{ inputs.account_id }}%0AFor details see https://github.com/${{ inputs.repo_owner }}/${{ inputs.repo }}/actions/runs/${{ steps.return_dispatch_acct_add.outputs.run_id }}"

    - name: Get Job ID & Terragrunt Run URL
      if: ${{ always() }} # This ensures this step always runs regardless of failure of previous step
      id: jobs_data
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
      shell: bash
      run: |
        run_id=${{ steps.return_dispatch.outputs.run_id }}
        if [[ -z "$run_id" ]]; then run_id=${{ steps.return_dispatch_acct_req.outputs.run_id }}; fi
        if [[ -z "$run_id" ]]; then run_id=${{ steps.return_dispatch_acct_add.outputs.run_id }}; fi
        job_id="$(gh api /repos/$REPO_OWNER/$REPO/actions/runs/$run_id/jobs | jq .jobs[0].id)"
        output=$(gh api /repos/$REPO_OWNER/$REPO/actions/jobs/$job_id)
        step_number=$(echo "$output" | jq -r '.steps[] | select(.name | startswith("Run terragrunt")).number')
        step_fragment="#step:$step_number:1" # Link to first line of the Run Terragrunt Step
        job_url="https://github.com/$REPO_OWNER/$REPO/actions/runs/$run_id/job/$job_id$step_fragment"
        echo "JOB_ID=$job_id" >> "$GITHUB_OUTPUT"
        echo "JOB_URL=$job_url" >> "$GITHUB_OUTPUT"

    - name: Retrieve terragrunt logs
      id: get_tg_logs
      if: ${{ always() && contains(inputs.command, 'plan') }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
        JOB_ID: ${{ steps.jobs_data.outputs.JOB_ID }}
        JOB_URL: ${{ steps.jobs_data.outputs.JOB_URL }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
        WORKING_DIR: ${{ inputs.working_directory }}
      shell: bash
      run: |
        JOB_LOGS="$(gh api /repos/$REPO_OWNER/$REPO/actions/jobs/$JOB_ID/logs)"
        JOB_LOGS_FAILED=$(gh run --repo $REPO_OWNER/$REPO view --job $JOB_ID --log-failed)
        REGEX='(Run gruntwork-io.*Post job cleanup)'
        if [[ "$JOB_LOGS" =~ $REGEX ]]; then LOGS_OUTPUT="true"; fi
        if [[ -z "$JOB_LOGS_FAILED" ]]; then FAILED_LOGS_OUTPUT="true"; EMOJI=":white_check_mark:"; STATUS="succeeded"; else EMOJI=":x:"; STATUS="failed"; fi
        echo "emoji=$EMOJI" >> $GITHUB_OUTPUT
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "logs_output=$LOGS_OUTPUT" >> $GITHUB_OUTPUT
        echo "failed_logs_output=$FAILED_LOGS_OUTPUT" >> $GITHUB_OUTPUT

    - name: Post terragrunt logs as PR comment
      id: post_tg_logs
      if: ${{ always() && contains(inputs.command, 'plan') }}
      env:
        GH_TOKEN: ${{ inputs.infra_live_token }}
        JOB_ID: ${{ steps.jobs_data.outputs.JOB_ID }}
        JOB_URL: ${{ steps.jobs_data.outputs.JOB_URL }}
        WORKING_DIR: ${{ inputs.working_directory }}
        STATUS: ${{ steps.get_tg_logs.outputs.status }}
        EMOJI: ${{ steps.get_tg_logs.outputs.emoji }}
        LOGS_OUTPUT: ${{ steps.get_tg_logs.outputs.logs_output }}
        PR_NUMBER: ${{ github.event.number }}
      shell: bash
      run: |
        if [ $STATUS = 'succeeded' ]; then
          COPY="To apply these changes, merge this pull request."
        else
          COPY="Inspect the attached logs, triage the issue, make any required changes, then push changes to this pull request to run another plan."
        fi

        PR_COMMENT=$'## Terragrunt Plan\n\n'"$EMOJI Terragrunt Plan $STATUS for "$'`'"$WORKING_DIR"$'`.\n\n '"$COPY"$'\n\n[View logs]('"$JOB_URL"$')\n\n'
        if [[ -n "$LOGS_OUTPUT" ]]; then gh issue comment $PR_NUMBER --body "$PR_COMMENT"; fi

    - name: Post terragrunt logs as GH Issue on apply failure
      id: get_tg_logs_apply
      if: ${{ always() && contains(inputs.command, 'apply') && steps.get_tg_logs.outputs.failed_logs_output != null }}
      env:
        GH_TOKEN: ${{ inputs.infra_live_token }}
        JOB_ID: ${{ steps.jobs_data.outputs.JOB_ID }}
        JOB_URL: ${{ steps.jobs_data.outputs.JOB_URL }}
        WORKING_DIR: ${{ inputs.working_directory }}
        ACTOR: ${{ inputs.actor }}
      shell: bash
      run: |
        ISSUE_BODY="Terragrunt Apply failed :x: for "$'`'"$WORKING_DIR"$'`.\n\n Inspect the attached logs, triage the issue, then create a new pull request with the required changes.\n\n[View logs]('"$JOB_URL"$')'
        gh issue create --title "Terragrunt Apply failed for $WORKING_DIR" --body "$ISSUE_BODY" --assignee $ACTOR
