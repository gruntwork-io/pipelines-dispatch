name: "Pipelines Dispatch"
description: "Dispatch Terragrunt plan/apply/destroy jobs with Gruntwork Pipelines"
inputs:
  account_id:
    description: "The AWS Account in which the action will run"
    required: true
  repo:
    description: "The infrastructure-pipelines repo where jobs should be dispatched"
    required: true
  repo_owner:
    description: "The owner of the infrastructure-pipelines repo where jobs should be dispatched"
    required: true
  branch:
    description: "The branch against which Pipelines will run the action"
    required: true
  working_directory:
    description: "The directory in which Terragrunt will run the action"
    required: true
  command:
    description: "The command (e.g., plan, apply, etc) for Terragrunt to run"
    required: true
  args:
    description: "The arguments to pass into Terragrunt"
    required: true
  infra_pipelines_token:
    description: "GitHub PAT which has access to run GitHub Actions Workflows in your infrastructure-pipelines repository"
    required: true
  infra_live_token:
    description: "GitHub PAT which has access to create issues and PR comments in your infrastructure-live repository"
    required: true
  change_type:
    description: "What type of infrastructure change occurred"
    required: true
  additional_data:
    description: "Change Type specific data"
    required: false
  actor:
    description: "The github actor responsible for the change"
    required: true

runs:
  using: "composite"
  steps:
    - name: Dispatch an action and get the run ID
      if: ${{ !contains(fromJSON('["AccountRequested", "AccountAdded"]'), inputs.change_type)}}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: codex-/return-dispatch@v1.10.0
      id: return_dispatch
      with:
        token: ${{ inputs.infra_pipelines_token }}
        ref: "refs/heads/main"
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        workflow: terragrunt-executor.yml
        workflow_inputs: '{
          "account": "${{ inputs.account_id }}",
          "branch": "${{ inputs.branch }}",
          "working_directory": "${{ inputs.working_directory }}",
          "terragrunt_command": "${{ inputs.command }} ${{ inputs.args }}"
          }'
    - name: Dispatch an action and get the run ID
      if: ${{ inputs.change_type == 'AccountRequested' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: codex-/return-dispatch@v1.10.0
      id: return_dispatch_acct_req
      with:
        token: ${{ inputs.infra_pipelines_token }}
        ref: "refs/heads/main"
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        workflow: create-account-and-generate-baselines.yml
        workflow_inputs: '{
          "management_account": "${{ inputs.account_id }}",
          "new_account_name": "${{ fromJSON(inputs.additional_data).AccountName }}",
          "branch": "${{ inputs.branch }}",
          "working_directory": "${{ inputs.working_directory }}",
          "terragrunt_command": "${{ inputs.command }} ${{ inputs.args }}"
          }'
    - name: Dispatch an action and get the run ID
      if: ${{ inputs.change_type == 'AccountAdded' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: codex-/return-dispatch@v1.10.0
      id: return_dispatch_acct_add
      with:
        token: ${{ inputs.infra_pipelines_token }}
        ref: "refs/heads/main"
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        workflow: apply-new-account-baseline.yml
        workflow_inputs: '{
          "management_account": "${{ inputs.account_id }}",
          "child_account": "${{ fromJSON(inputs.additional_data).ChildAccountId }}",
          "branch": "${{ inputs.branch }}",
          "working_directory": "${{ inputs.working_directory }}",
          "terragrunt_command": "${{ inputs.command }} ${{ inputs.args }}"
          }'

    # Await default
    - name: Await Run ID ${{ steps.return_dispatch.outputs.run_id }}
      if: ${{ !contains(fromJSON('["AccountRequested", "AccountAdded"]'), inputs.change_type)}}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: Codex-/await-remote-run@v1.9.0
      with:
        token: ${{ inputs.infra_pipelines_token }}
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        run_id: ${{ steps.return_dispatch.outputs.run_id }}
        run_timeout_seconds: 3600 # one hour
        poll_interval_ms: 5000 # Optional

    - name: Completed
      if: ${{ always() && !contains(fromJSON('["AccountRequested", "AccountAdded"]'), inputs.change_type)}}
      shell: bash
      env:
        COMMAND: ${{ inputs.command }}
        WORKING_DIR: ${{ inputs.working_directory }}
        ACCOUNT_ID: ${{ inputs.account_id }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
      run: echo "::notice ::Completed $COMMAND for $WORKING_DIR in acct $ACC0UNT_ID%0AFor details see https://github.com/$REPO_OWNER/$REPO/actions/runs/${{ steps.return_dispatch.outputs.run_id }}"

    # Await account request
    - name: Await Acct Req Run ID ${{ steps.return_dispatch_acct_req.outputs.run_id }}
      if: ${{ always() && inputs.change_type == 'AccountRequested' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: Codex-/await-remote-run@v1.9.0
      with:
        token: ${{ inputs.infra_pipelines_token }}
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        run_id: ${{ steps.return_dispatch_acct_req.outputs.run_id }}
        run_timeout_seconds: 3600 # one hour
        poll_interval_ms: 5000 # Optional

    - name: Completed Acct Req
      if: ${{ always() && inputs.change_type == 'AccountRequested' }}
      shell: bash
      env:
        COMMAND: ${{ inputs.command }}
        WORKING_DIR: ${{ inputs.working_directory }}
        ACCOUNT_ID: ${{ inputs.account_id }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
      run: echo "::notice ::Completed $COMMAND for $WORKING_DIR in acct $ACCOUNT_ID%0AFor details see https://github.com/$REPO_OWNER/$REPO/actions/runs/${{ steps.return_dispatch_acct_req.outputs.run_id }}"

    # Await account added
    - name: Await Acct Add Run ID ${{ steps.return_dispatch_acct_add.outputs.run_id }}
      if: ${{ always() && inputs.change_type == 'AccountAdded' }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
      uses: Codex-/await-remote-run@v1.9.0
      with:
        token: ${{ inputs.infra_pipelines_token }}
        repo: ${{ inputs.repo }}
        owner: ${{ inputs.repo_owner }}
        run_id: ${{ steps.return_dispatch_acct_add.outputs.run_id }}
        run_timeout_seconds: 3600 # one hour
        poll_interval_ms: 5000 # Optional

    - name: Completed Acct Add
      if: ${{ always() && inputs.change_type == 'AccountAdded' }}
      shell: bash
      run: echo "::notice ::Completed ${{ inputs.command }} for ${{ inputs.working_directory }} in acct ${{ inputs.account_id }}%0AFor details see https://github.com/${{ inputs.repo_owner }}/${{ inputs.repo }}/actions/runs/${{ steps.return_dispatch_acct_add.outputs.run_id }}"

    - name: Get Job ID & Terragrunt Run URL
      if: ${{ always() }} # This ensures this step always runs regardless of failure of previous step
      id: jobs_data
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
      shell: bash
      run: |
        RUN_ID=${{ steps.return_dispatch.outputs.run_id }}
        if [[ -z "$RUN_ID" ]]; then RUN_ID=${{ steps.return_dispatch_acct_req.outputs.run_id }}; fi
        if [[ -z "$RUN_ID" ]]; then RUN_ID=${{ steps.return_dispatch_acct_add.outputs.run_id }}; fi
        JOB_ID="$(gh api /repos/$REPO_OWNER/$REPO/actions/runs/$RUN_ID/jobs | jq .jobs[0].id)"
        JOB_OUTPUT=$(gh api /repos/$REPO_OWNER/$REPO/actions/jobs/$JOB_ID)
        STEP_NUMBER=$(echo "$JOB_OUTPUT" | jq -r '.steps[] | select(.name | startswith("Run terragrunt")).number')
        STEP_FRAGMENT="#step:$STEP_NUMBER:1" # Link to first line of the Run Terragrunt Step
        TERRAGRUNT_STEP_URL="https://github.com/$REPO_OWNER/$REPO/actions/runs/$RUN_ID/job/$JOB_ID$STEP_FRAGMENT"
        echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"
        echo "job_id=$JOB_ID" >> "$GITHUB_OUTPUT"
        echo "terragrunt_step_url=$TERRAGRUNT_STEP_URL" >> "$GITHUB_OUTPUT"

    - name: Retrieve job run results
      id: get_job_run_results
      if: ${{ always() }}
      env:
        GH_TOKEN: ${{ inputs.infra_pipelines_token }}
        JOB_ID: ${{ steps.jobs_data.outputs.job_id }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
      shell: bash
      run: |
        TERRAGRUNT_SUCCESS=$(gh run --repo $REPO_OWNER/$REPO view --job $JOB_ID --json jobs | jq -r '[.jobs[0].steps[] | select(.name | startswith("Run terragrunt")).conclusion] | all(.[] == "success"; .)')
        if [[ "$TERRAGRUNT_SUCCESS" == "true" ]]; then TERRAGRUNT_STEP_EMOJI=":white_check_mark:"; TERRAGRUNT_STEP_STATUS="succeeded"; fi
        if [[ "$TERRAGRUNT_SUCCESS" == "false" ]]; then TERRAGRUNT_STEP_EMOJI=":x:"; TERRAGRUNT_STEP_STATUS="failed"; fi
        FAILED_STEPS=$(gh run --repo $REPO_OWNER/$REPO view --job $JOB_ID --json jobs | jq -r '.jobs[0].steps[] | select(.name | startswith("Run terragrunt") | not) | select(.conclusion == "failure")')
        echo "terragrunt_step_status=$TERRAGRUNT_STEP_STATUS" >> $GITHUB_OUTPUT
        echo "terragrunt_step_emoji=$TERRAGRUNT_STEP_EMOJI" >> $GITHUB_OUTPUT
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "failed_steps<<$EOF" >> $GITHUB_OUTPUT
        echo "$FAILED_STEPS" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT

    - name: Post PR comments
      if: ${{ always() && contains(inputs.command, 'plan') }}
      env:
        GH_TOKEN: ${{ inputs.infra_live_token }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
        WORKING_DIR: ${{ inputs.working_directory }}
        RUN_ID: ${{ steps.jobs_data.outputs.run_id }}
        JOB_ID: ${{ steps.jobs_data.outputs.job_id }}
        TERRAGRUNT_STEP_URL: ${{ steps.jobs_data.outputs.terragrunt_step_url }}
        TERRAGRUNT_STEP_STATUS: ${{ steps.get_job_run_results.outputs.terragrunt_step_status }}
        TERRAGRUNT_STEP_EMOJI: ${{ steps.get_job_run_results.outputs.terragrunt_step_emoji }}
        FAILED_STEPS: ${{ steps.get_job_run_results.outputs.failed_steps }}
        PR_NUMBER: ${{ github.event.number }}
      shell: bash
      run: |
        if [ $TERRAGRUNT_STEP_STATUS = 'succeeded' ]; then
          COPY="_To **apply** all changes, merge this pull request. On merge, another comment will be added to this pull request with apply logs._"
        else
          COPY="_To **re-run** the plan, push a new set of changes to this pull request’s branch._"
        fi

        # Post PR comment indicating terragrunt plan success/failure
        COMMENT_BODY=$'## Terragrunt Plan\n\n'"$TERRAGRUNT_STEP_EMOJI Terragrunt Plan $TERRAGRUNT_STEP_STATUS for "$'`'"$WORKING_DIR"$'`.\n\n '"$COPY"$'\n\n[View logs]('"$TERRAGRUNT_STEP_URL"$')'
        if [[ -n "$TERRAGRUNT_STEP_STATUS" ]]; then gh issue comment $PR_NUMBER --body "$COMMENT_BODY"; fi

        # If steps other than terragrunt plan failed, post PR comment about a pipeline failure.
        # Include links to each of the failed steps.
        if [[ -n "$FAILED_STEPS" ]]; then
          readarray -t FAILED_STEP_NUMBERS < <(echo $FAILED_STEPS | jq -r .number)
          readarray -t FAILED_STEP_NAMES < <(echo $FAILED_STEPS | jq -r .name)
          COMMENT_BODY=$'## Pipelines Run Failed\n\n:x: Pipelines run failed for `'"$WORKING_DIR"$'`.\n\nInspect the logs associated with each of the following failures to learn the details of each failure:\n\n'
          for i in "${!FAILED_STEP_NUMBERS[@]}"; do
            LINK=$'- ['"${FAILED_STEP_NAMES[$i]}"$']('"https://github.com/$REPO_OWNER/$REPO/actions/runs/$RUN_ID/job/$JOB_ID"$'#step:'"${FAILED_STEP_NUMBERS[$i]}"$':1)'
            COMMENT_BODY="$COMMENT_BODY""$LINK"$'\n'
          done
          gh issue comment $PR_NUMBER --body "$COMMENT_BODY"
        fi

    - name: Get requesting PR number
      id: get_pr_number
      # Only try this if we've done an apply, which means the PR has been merged
      if: ${{ always() && contains(inputs.command, 'apply') }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.infra_live_token }}
        COMMIT_SHA: ${{ inputs.branch }}
      run: |
        PR_NUMBER=$(gh pr list --search $COMMIT_SHA --state merged --json number | jq '.[].number')
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

    - name: Post PR comments on apply
      if: ${{ always() && contains(inputs.command, 'apply') }}
      env:
        GH_TOKEN: ${{ inputs.infra_live_token }}
        REPO: ${{ inputs.repo }}
        REPO_OWNER: ${{ inputs.repo_owner }}
        WORKING_DIR: ${{ inputs.working_directory }}
        RUN_ID: ${{ steps.jobs_data.outputs.run_id }}
        JOB_ID: ${{ steps.jobs_data.outputs.job_id }}
        TERRAGRUNT_STEP_URL: ${{ steps.jobs_data.outputs.terragrunt_step_url }}
        TERRAGRUNT_STEP_STATUS: ${{ steps.get_job_run_results.outputs.terragrunt_step_status }}
        TERRAGRUNT_STEP_EMOJI: ${{ steps.get_job_run_results.outputs.terragrunt_step_emoji }}
        FAILED_STEPS: ${{ steps.get_job_run_results.outputs.failed_steps }}
        PR_NUMBER: ${{ steps.get_pr_number.outputs.pr_number }}
      shell: bash
      run: |
        if [ $TERRAGRUNT_STEP_STATUS = 'succeeded' ]; then
          COPY="_**Apply** ran on the main branch as a result of this pull request being merged._"
        else
          COPY="_To recover from the failure, check the logs, push any required changes to a new branch, then create a new pull request._"
        fi

        # Post PR comment indicating terragrunt apply success/failure
        COMMENT_BODY=$'## Terragrunt Apply\n\n'"$TERRAGRUNT_STEP_EMOJI Terragrunt Apply $TERRAGRUNT_STEP_STATUS for "$'`'"$WORKING_DIR"$'`.\n\n '"$COPY"$'\n\n[View logs]('"$TERRAGRUNT_STEP_URL"$')'
        if [[ -n "$TERRAGRUNT_STEP_STATUS" ]]; then gh issue comment $PR_NUMBER --body "$COMMENT_BODY"; fi

        # If steps other than terragrunt apply failed, post PR comment about a pipeline failure.
        # Include links to each of the failed steps.
        if [[ -n "$FAILED_STEPS" ]]; then
          readarray -t FAILED_STEP_NUMBERS < <(echo $FAILED_STEPS | jq -r .number)
          readarray -t FAILED_STEP_NAMES < <(echo $FAILED_STEPS | jq -r .name)
          COMMENT_BODY=$'## Pipelines Run Failed\n\n:x: Pipelines run failed for `'"$WORKING_DIR"$'`.\n\nInspect the logs associated with each of the following failures to learn the details of each failure:\n\n'
          for i in "${!FAILED_STEP_NUMBERS[@]}"; do
            LINK=$'- ['"${FAILED_STEP_NAMES[$i]}"$']('"https://github.com/$REPO_OWNER/$REPO/actions/runs/$RUN_ID/job/$JOB_ID"$'#step:'"${FAILED_STEP_NUMBERS[$i]}"$':1)'
            COMMENT_BODY="$COMMENT_BODY""$LINK"$'\n'
          done
          gh issue comment $PR_NUMBER --body "$COMMENT_BODY"
        fi

    - name: Open GH Issue on apply failure
      if: ${{ always() && contains(inputs.command, 'apply') && steps.get_job_run_results.outputs.failed_steps != null }}
      env:
        GH_TOKEN: ${{ inputs.infra_live_token }}
        JOB_ID: ${{ steps.jobs_data.outputs.JOB_ID }}
        JOB_URL: ${{ steps.jobs_data.outputs.JOB_URL }}
        WORKING_DIR: ${{ inputs.working_directory }}
        ACTOR: ${{ inputs.actor }}
        PR_NUMBER: ${{ steps.get_pr_number.outputs.get_pr_number }}
      shell: bash
      run: |
        ISSUE_BODY=":x: Terragrunt Apply failed for "$'`'"$WORKING_DIR"$'` when applying changes requested in PR #$PR_NUMBER.\n\n _Inspect the attached logs, triage the issue, then create a new pull request with the required changes._\n\n[View logs]('"$JOB_URL"$')'
        gh issue create --title "Terragrunt Apply failed for $WORKING_DIR" --body "$ISSUE_BODY" --assignee $ACTOR

